package com.grkmonder.reservationsystem.webApi.controllers;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.grkmonder.reservationsystem.business.abstracts.CarService;
import com.grkmonder.reservationsystem.business.requests.CreateReservationRequest;
import com.grkmonder.reservationsystem.business.requests.UpdateReservationRequest;
import com.grkmonder.reservationsystem.business.responses.GetAllCarResponse;
import com.grkmonder.reservationsystem.business.responses.GetByIdCarResponse;

import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@RestController //annotation : bilgilendirme
@RequestMapping("/api/reservations")
@AllArgsConstructor
public class CarsController {
	private CarService carService;
	
	@GetMapping
	public List<GetAllCarResponse> getAllCars() {
	    // Service metodun zaten DTO döndürüyor, direkt kullan
	    List<GetAllCarResponse> carsResponse = carService.getAllCars();

	    // Eğer reservationTimes List<Date> içeriyorsa ve Swagger/JSON uyumsuzsa:
	    carsResponse.forEach(car -> {
	        if (car.getReservationTimes() != null) {
	            List<String> formattedDates = car.getReservationTimes().stream()
	                    .map(date -> date.toString()) // yyyy-MM-dd formatında string
	                    .collect(Collectors.toList());
	            car.setReservationTimes(formattedDates);
	        }
	    });

	    return carsResponse;
	}

	@GetMapping("/{id}")
	public GetByIdCarResponse getCarById(@PathVariable int id) {
	    GetByIdCarResponse response = carService.getCarById(id);

	    // Tek araç için tarihleri formatla
	    if (response.getReservationTimes() != null) {
	        List<String> formattedDates = response.getReservationTimes().stream()
	                .map(date -> date.toString())
	                .collect(Collectors.toList());
	        response.setReservationTimes(formattedDates);
	    }

	    return response;
	}

	
	@PostMapping()
	@ResponseStatus(code = HttpStatus.CREATED)
	public void add(@RequestBody @Valid() CreateReservationRequest createReservationRequest) {
		this.carService.add(createReservationRequest);
	}
	
	
	@PutMapping
	public void update(@RequestBody UpdateReservationRequest updateReservationRequest) {
		this.carService.update(updateReservationRequest);
	}
	
	
	@DeleteMapping("/{id}")
	public void delete(@PathVariable int id) {
		this.carService.delete(id);
	}
	
	
}
